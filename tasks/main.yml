---

- name: get git username
  when: configure_git
  shell: git config --global --get user.name
  register: git_user_name_result
  changed_when: False
  ignore_errors: yes

- name: get git user email
  when: configure_git
  shell: git config --global --get user.email
  register: git_user_email_result
  changed_when: False
  ignore_errors: yes

- name: set git username
  shell: git config --global user.name "{{git_user_name}}"
  when: configure_git and git_user_email_result.stdout != "{{git_user_name}}"

- name: set git user email
  shell: git config --global user.email "{{git_user_email}}"
  when: configure_git and git_user_email_result.stdout != "{{git_user_email}}"

# Install.
- name: install homebrew via the curl oneliner
  shell: ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  args:
    creates: /usr/local/bin/brew

# Update.
- name: update homebrew
  homebrew: update_homebrew=yes upgrade_all=no

- name: upgrade homebrew packages
  homebrew: update_homebrew=no upgrade_all=yes
  when: homebrew_upgrade_all_packages

# Tap.
- name: Install global homebrew taps.
  homebrew_tap: "tap={{ item }} state=present"
  with_items: "{{ global_homebrew_taps }}"

# Brew.
- name: Install global homebrew packages.
  homebrew: "name={{ item }} state=present"
  with_items: "{{ global_homebrew_packages }}"

- name: Install group homebrew packages.
  homebrew: "name={{ item }} state=present"
  with_items: "{{ group_homebrew_packages }}"

- name: Install personal homebrew packages.
  homebrew: "name={{ item }} state=present"
  with_items: "{{ personal_homebrew_packages }}"

- name: Ensure blacklisted homebrew packages are not installed.
  homebrew: "name={{ item }} state=absent"
  with_items: "{{ homebrew_blacklisted_packages }}"

# Cask.
- name: Install global cask applications.
  homebrew_cask:
    name: "{{ item }}"
    state: present
    install_options: "appdir={{ homebrew_cask_appdir }}"
  with_items: "{{ global_homebrew_cask_apps }}"

- name: Install group cask applications.
  homebrew_cask:
    name: "{{ item }}"
    state: present
    install_options: "appdir={{ homebrew_cask_appdir }}"
  with_items: "{{ group_homebrew_cask_apps }}"

- name: Install personal cask applications.
  homebrew_cask:
    name: "{{ item }}"
    state: present
    install_options: "appdir={{ homebrew_cask_appdir }}"
  with_items: "{{ personal_homebrew_cask_apps }}"

- name: Check for Brewfile.
  stat:
    path: "{{ homebrew_brewfile_dir }}/Brewfile"
  register: homebrew_brewfile

- name: Install from Brewfile.
  command: "brew bundle chdir={{ homebrew_brewfile_dir }}"
  when: homebrew_brewfile.stat.exists and homebrew_use_brewfile
